
<script type="text/javascript">
// <![CDATA[

function DragDropLink(){

	//*** Action occures on drag.
	this._drag = function(sourceHtmlObject, dhtmlObject, targetHtmlObject) {
		targetHtmlObject.style.backgroundColor = "";
		targetHtmlObject.value = sourceHtmlObject.parentObject.id;
		
		//*** Trigger the language module.
		objContentLanguage.toTemp(targetHtmlObject.id);
	}

	//*** Action occures on drag moved in landing zone.
	this._dragIn = function(htmlObject, shtmlObject) {
		htmlObject.style.backgroundColor = "#fffacd";
		return htmlObject;
	}

	//*** Action occures on drag moved out landing zone.
	this._dragOut = function(htmlObject) {
		htmlObject.style.backgroundColor = "";
		return this;
	}
}

//*** Resize tree container.
function resizeTree() {
	 var $objTree 		= jQuery("#treeContainer"),
	 	 windowHeight 	= jQuery(window).height(),
	 	 offsetY 		= $objTree.offset().left,
	 	 headerHeight	= 180,
	 	 treeHeight 	= windowHeight - offsetY - headerHeight;
 	 
	 $objTree.css({ height: treeHeight + "px"});
}

function checkDynamicAlias() {
	if ($("#frm_dynamic_alias_check:checked").length > 0) {
		$("#frm_dynamic_alias").removeAttr("disabled");
	} else {
		$("#frm_dynamic_alias").attr("disabled", "disabled");
	}
}

function generateSlug(str) {
	var from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;";
	var to   = "aaaaeeeeiiiioooouuuunc------";
	
	str = str.replace(/^\s+|\s+$/g, ''); // trim
	str = str.toLowerCase();
	  
	// remove accents, swap ñ for n, etc
	for (var i=0, l=from.length ; i<l ; i++) {
		str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
	}
	
	str = str
			.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
			.replace(/\s+/g, '-') // collapse whitespace and replace by -
			.replace(/-+/g, '-'); // collapse dashes
	
	return str;
}

//*** Onload action.
jQuery(function(){
	if(typeof $tabs == "undefined"){
		$tabs = jQuery("#elementForm").tabs({
			selected: {SELECTED_TAB},
			show: function () {
				var $alias 	= $("#frm_meta_alias"),
					$fields	= $("#section-fields"),
					$meta	= $("#section-meta")
				
				if (!$meta.hasClass("ui-tabs-hide") && $alias.val() == "") {
					$alias.bind("focus", function () {
						var $textField = $fields.find("input[type=text]:first")
						
						if ($textField.length > 0) {
							$alias.val(generateSlug($textField.val()))
						}
					})
				}
			}
		});
	}
	
	if (jQuery("#treeContainer").length > 0) {
		//*** On resize, recalculate the size of the treeview module.
		jQuery(window).bind("resize", function(){
			resizeTree();
		});
		resizeTree();
		
		/**
		 * !!! THIS NEEDS SOME CROSS-BROWSER CHECKING !!!
		 */
		var $tree = jQuery("#treeContainer");
		var strStyleCache = "";
		var leftWrapHeight = $("#left-wrap").height();
		var scrollWidth = $(".containerTableStyle")[0].scrollWidth + 30;
		var timer;
		$tree
			.bind("mouseenter", function () {
				clearTimeout(timer); // Stop hiding.
				if ($(this).outerWidth() < scrollWidth) {
					strStyleCache = $(this).attr("style"); // Save current custom styles
					
					$(this).css({
						width: $(".containerTableStyle")[0].scrollWidth + 30,
						position: "absolute",
						left: $(this).position().left,
						top: $(this).position().top,
						"z-index": 9999,
						background: "#ffffff",
						"box-shadow":"3px 0px 16px #dedede"
					})
					$("#left-wrap").height(leftWrapHeight);
				}
			})
			.bind("mouseleave", function () {
				var $this = $(this);
				
				clearTimeout(timer);
				timer = setTimeout(function () {
					$this.removeAttr("style").attr("style", strStyleCache);
					$("#left-wrap").height("auto");
				}, 1000);
			});
		/**
		 * END
		 */
	}

	jQuery(".input-button").button();

	$("#frm_dynamic_alias_check").bind("click", function(){
		checkDynamicAlias();
	});	
	checkDynamicAlias();
	
});

{SCRIPT}

// ]]>
</script>
</head>